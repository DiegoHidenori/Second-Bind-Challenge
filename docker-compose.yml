# ---------------------------------------------------------------------------------------------------------------------
# COMPLETE CONTAINERS CREATION

# docker-compose -p second-bind -f docker-compose.yml up -d --build

# docker-compose -p second-bind -f docker-compose.yml down -v

# ---------------------------------------------------------------------------------------------------------------------

services:
  # INVENTORY-SERVICE =================================================================================================
  #  inventory-service:
  #    image: inventory-service
  #    container_name: inventory-service
  #    ports:
  #      - "8084:8084"   # The internal port should match the exposed port in Dockerfile.
  #    build:
  #      context: ./inventory-service
  #      dockerfile: ./Dockerfile
  #    environment:
  #      SPRING_PROFILES_ACTIVE: docker
  #    depends_on:
  #      inventory-service-postgres:
  #        condition: service_healthy
  #    networks:
  #      - spring

  inventory-service-postgres:
    image: postgres
    container_name: inventory-service-postgres
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    #      - POSTGRES_DB=inventory-service
    volumes:
      - ./data/inventory:/var/lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring

  inventory-service-pgadmin:
    image: dpage/pgadmin4
    container_name: inventory-service-pgadmin4
    ports:
      - "8889:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - spring

  # NOTIFICATION-SERVICE ==============================================================================================
  #  notification-service:
  #    image: notification-service
  #    container_name: notification-service
  #    ports:
  #      - "8090:8090"
  #    build:
  #      context: .
  #      dockerfile: ./notification-service/Dockerfile
  #    environment:
  #      SPRING_PROFILES_ACTIVE: docker
  #    networks:
  #      - spring

  # ORDER-SERVICE =====================================================================================================
  #  order-service:
  #    image: order-service
  #    container_name: order-service
  #    ports:
  #      - "8083:8083"   # The internal port should match the exposed port in Dockerfile.
  #    build:
  #      context: .
  #      dockerfile: ./order-service/Dockerfile
  #    environment:
  #      SPRING_PROFILES_ACTIVE: docker
  #    depends_on:
  #      order-service-postgres:
  #        condition: service_healthy
  #    networks:
  #      - spring

  order-service-postgres:
    image: postgres
    container_name: order-service-postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    #      - POSTGRES_DB=order-service
    volumes:
      - ./data/order:/var/lib/postgresql/data
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring

  order-service-pgadmin:
    image: dpage/pgadmin4
    container_name: order-service-pgadmin4
    ports:
      - "8888:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - spring

  # PRODUCT SERVICE ===================================================================================================
  #  product-service:
  #    image: product-service
  #    container_name: product-service
  #    ports:
  #      - "8081:8081"   # The internal port should match the exposed port in Dockerfile.
  #    build:
  #      context: ./product-service
  #      dockerfile: ./Dockerfile
  #    environment:
  #      SPRING_PROFILES_ACTIVE: docker
  #    depends_on:
  #      - product-service-mongodb
  #    networks:
  #      - spring

  product-service-mongodb:
    image: mongo
    container_name: product-service-mongodb
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=product-service
    volumes:
      - ./data/product:/data/db
      - ./init/product/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    #    command: mongod -auth
    networks:
      - spring

  product-mongo-express:
    image: mongo-express
    container_name: product-service-express
    ports:
      - "8082:8082"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=product-service-mongodb
    depends_on:
      - product-service-mongodb
    networks:
      - spring

# Optional for persisting data
#volumes:
#  mongo-db:
#    driver: local

networks:
  spring:
    driver: bridge
